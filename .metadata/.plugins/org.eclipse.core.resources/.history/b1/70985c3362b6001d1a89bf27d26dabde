<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
	pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
	<style>
		.mainDiv {
			width: 500px;
			margin: 0 auto;
			padding: 20px;
			border: 1px solid #ccc;
			border-radius: 5px;
			box-shadow: 0 0 5px #ccc;
			font-family: Arial, sans-serif;
		}
		h1 {
			font-family: Arial, sans-serif;
			font-size: 32px;
			color: #4CAF50;
			text-align: center;
			margin-bottom: 20px;
		}
		input {
			padding: 10px;
			border: 1px solid #ccc;
			border-radius: 5px;
			margin-bottom: 10px;
			width: 100%;
			box-sizing: border-box;
			font-size: 16px;
			font-family: Arial, sans-serif;
		}
		button[type="submit"] {
			background-color: #4CAF50;
			color: white;
			padding: 10px;
			border: none;
			border-radius: 5px;
			cursor: pointer;
			font-size: 16px;
			font-family: Arial, sans-serif;
			margin-top: 10px;
			width: 100%;
			box-sizing: border-box;
		}
		button[type="submit"]:hover {
			background-color: #3e8e41;
		}
	</style>
</head>
<body>
	<div class="mainDiv">
		<h1>Registration Form</h1>
		<form action="add-customer">
			Name : <input name="name" /><br> Email : <input name="email" /><br>
			city : <input name="city" />
			<button type="submit">Add</button>
		</form>
	</div>

</body>
</html>
In this example, we have added styles for the registration form. We have used CSS properties such as width, margin, padding, border, border-radius, box-shadow, font-family, font-size, color, text-align, and margin-top to customize the look of the registration form. The form will now be centered, have a border, a green color for the submit button, and more. You can adjust the CSS properties to your liking.




unmesh.kadam2001@gmail.com
ApplicationContext ctx = new ClassPathXmlApplicationContext("my-spring-config.xml");
		CarPartsInventoryRepository cpRepo = ctx.getBean(CarPartsInventoryRepository.class);                                        what is the perpose of above code
The code you provided creates an instance of the ApplicationContext class and initializes it with the XML configuration file my-spring-config.xml. It then retrieves an instance of the CarPartsInventoryRepository class from the context using the getBean() method.

The purpose of this code is to retrieve an instance of the CarPartsInventoryRepository class that has been configured and managed by Spring. By using the ApplicationContext class, we can access the Spring container



</head>
<body>
	<div class="mainDiv">
		<h1>Registration Form</h1>
		<form action="add-customer">
			Name : <input name="name" /><br> Email : <input name="email" /><br>
			city : <input name="city" />
			<button type="submit">Add</button>
		</form>
	</div>

</body>
</html>